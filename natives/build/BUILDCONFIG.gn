# Copyright 2016 Google Inc.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#is_skia_standalone = true

# It's best to keep the names and defaults of is_foo flags consistent with Chrome.

declare_args() {
  is_official_build = false
  #is_component_build = false
  ndk = ""
  #qt_sdk = ""
  use_qt_for_android = false

  # It's nice to keep ndk_api set to what Clank targets, but probably no big deal if we can't.
  #if (target_cpu == "x86" || target_cpu == "arm") {
  #  ndk_api = 16
  #} else {
  #  ndk_api = 21
  #}

  sanitize = ""
  fyi_sanitize = ""

  ar = "ar"
  cc = "cc"
  cxx = "c++"

  # win SDK directory and version
  win_sdk_dir = "C:/Program Files (x86)/Windows Kits/10"
  win_sdk_version = "10.0.18362.0"
  # VS directory
  win_vc = ""
  # VS version, like "2013" "2015" "2017"
  win_vc_ver = "2017"
  # VS toolchain version, like "14.16.27023" "14.25.28610"
  win_toolchain_version = ""
  win_xp = false

  # clang bin directory
  clang_win = ""

  #skia_vulkan_sdk = getenv("VULKAN_SDK")
  #skia_moltenvk_path = ""
}
declare_args() {
  is_debug = !is_official_build
}

assert(!(is_debug && is_official_build))

if (target_cpu == "wasm") {
  target_os = "wasm"
}

# Platform detection
if (target_os == "") {
  target_os = host_os
  if (ndk != "") {
    target_os = "android"
  }
}
if (current_os == "") {
  current_os = target_os
}

is_linux = current_os == "linux"
is_mac = current_os == "mac"
is_win = current_os == "win"

if (target_cpu == "") {
  target_cpu = host_cpu
  if (is_android || is_ios) {
    target_cpu = "arm64"
  }
}
if (target_cpu == "x86_64") {
  target_cpu = "x64"
}
if (current_cpu == "") {
  current_cpu = target_cpu
}

is_clang = is_android || is_ios || is_mac ||
           (cc == "clang" && cxx == "clang++") || clang_win != ""
if (!is_clang && !is_win) {
  is_clang = exec_script("//build/BUIDCONFIG_is_clang.py",
                         [
                           cc,
                           cxx,
                         ],
                         "value")
}

if (is_clang) {
  is_clang = is_clang && !use_qt_for_android
}

# *********************************************************************************
# Config msvc builder
# 配置MSVC编译，首先会尝试从系统中自动寻找vc编译器，没有匹配到结果时，再从缺省硬编码配置路径中读取
# *********************************************************************************
if (target_os == "win") {
  # By default we look for 2017 (Pro & Community), then 2015. If MSVC is installed in a
  # non-default location, you can set win_vc to inform us where it is.
  vc_2017_pro_default = "C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/VC"
  vc_2017_com_default = "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC"
  vc_2017_bt_default = "C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC"
  vc_2015_default = "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC"
  vc_2013_default = "C:/Program Files (x86)/Microsoft Visual Studio 12.0/VC"

  msvc = win_vc_ver

  if (win_vc == "") {
    if ("True" == exec_script("//build/toolchain/win/BUIDCONFIG_win_check_vcdir.py",
                              [ "$vc_2017_pro_default" ],
                              "trim string")) {
      win_vc = vc_2017_pro_default
      msvc = 2017
    } else if ("True" == exec_script("//build/toolchain/win/BUIDCONFIG_win_check_vcdir.py",
                                     [ "$vc_2017_com_default" ],
                                     "trim string")) {
      win_vc = vc_2017_com_default
      msvc = 2017
    } else if ("True" == exec_script("//build/toolchain/win/BUIDCONFIG_win_check_vcdir.py",
                                     [ "$vc_2017_bt_default" ],
                                     "trim string")) {
      win_vc = vc_2017_bt_default
      msvc = 2017
    } 
    else if ("True" == exec_script("//build/toolchain/win/BUIDCONFIG_win_check_vcdir.py",
                                     [ "$vc_2015_default" ],
                                     "trim string")) {
      win_vc = vc_2015_default
      msvc = 2015
    } else if ("True" == exec_script("//build/toolchain/win/BUIDCONFIG_win_check_vcdir.py",
                                     [ "$vc_2013_default" ],
                                     "trim string")) {
      win_vc = vc_2013_default
      msvc = 2013
    }
  }
  assert(win_vc != "")  # Could not find VC installation. Set win_vc to your VC directory.
  
  if (msvc == "") {
    if ("True" == exec_script("//build/toolchain/win/BUIDCONFIG_win_check_vcdir.py", [ "$win_vc/Tools" ], "trim string")) {
      msvc = 2017
    } else {
      msvc = 2015
    }
  }
  
  if (msvc == 2017 && win_toolchain_version == "") {
    win_toolchain_version = exec_script("//build/toolchain/win/BUIDCONFIG_win_highest_version_vcdir.py",
                                        [
                                          "$win_vc/Tools/MSVC",
                                          "[0-9]{2}\.[0-9]{2}\.[0-9]{5}",
                                        ],
                                        "trim string")
  }
  if (win_sdk_version == "") {
    win_sdk_version = exec_script("//build/toolchain/win/BUIDCONFIG_win_highest_version_vcdir.py",
                         [
                           "$win_sdk_dir/Include",
                           "[0-9]{2}\.[0-9]\.[0-9]{5}\.[0-9]",
                         ],
                         "trim string")
  }
}
# *********************************************************************************

# A component is either a static or a shared library.
template("component") {
  _component_mode = "static_library"
  if (is_component_build) {
    _component_mode = "shared_library"
  }

  target(_component_mode, target_name) {
    forward_variables_from(invoker, "*")
  }
}

# Default configs
default_configs = [
  "//build:default",
  # "//build:no_exceptions",
  # "//build:no_rtti",
  # "//build:warnings",
  "//build:warnings_except_public_headers",
]
if (!is_debug) {
  default_configs += [ "//build:release" ]
}
default_configs += [ "//build:debug_symbols" ]
default_configs += [ "//build:extra_flags" ]

set_defaults("executable") {
  configs = [ "//build:executable" ] + default_configs
}

set_defaults("source_set") {
  configs = default_configs
}

set_defaults("static_library") {
  configs = default_configs
}

set_defaults("shared_library") {
  configs = default_configs
}

set_defaults("component") {
  configs = default_configs
  if (!is_component_build) {
    complete_static_lib = true
  }
}

# set default toolchain
if (is_win) {
  # Windows tool chain
  default_toolchain_name = "msvc"
  host_toolchain = "//build/toolchain/win:msvc"
  set_default_toolchain(host_toolchain)
} else if (is_mac) {
  # clang-like toolchains, including Clang.
  default_toolchain_name = "mac_clang"
  host_toolchain = "//build/toolchain/mac:clang_$host_cpu"
  set_default_toolchain(host_toolchain)
} else {
  # GCC-like toolchains, including Clang.
  set_default_toolchain("//build/toolchain:gcc_like")
  default_toolchain_name = "gcc_like"
  host_toolchain = "gcc_like_host"
}
