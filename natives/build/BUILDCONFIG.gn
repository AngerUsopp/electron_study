# Copyright 2016 Google Inc.
#
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#is_skia_standalone = true

# It's best to keep the names and defaults of is_foo flags consistent with Chrome.

declare_args() {
  is_official_build = false
  is_component_build = false

  sanitize = ""
  fyi_sanitize = ""

  ar = "ar"
  cc = "cc"
  cxx = "c++"

  # win SDK directory and version
  win_sdk_dir = "C:/Program Files (x86)/Windows Kits/10"
  # like "10.0.17763.0" "10.0.18362.0"
  win_sdk_version = "10.0.18362.0"
  # VS version, like "2013" "2015" "2017"
  win_vc_ver = 2017
  # VS toolchain directory, like "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC"
  win_vc_dir = ""
  # VS toolchain version, like "14.16.27023" "14.25.28610"
  win_toolchain_version = ""
  win_xp = false

  # clang bin directory
  clang_win = ""
}
declare_args() {
  is_debug = !is_official_build
}

assert(!(is_debug && is_official_build))

if (target_cpu == "wasm") {
  target_os = "wasm"
}

# Platform detection
if (target_os == "") {
  target_os = host_os
}
if (current_os == "") {
  current_os = target_os
}

is_linux = current_os == "linux"
is_mac = current_os == "mac"
is_win = current_os == "win"

if (target_cpu == "") {
  target_cpu = host_cpu
}
if (target_cpu == "x86_64") {
  target_cpu = "x64"
}
if (current_cpu == "") {
  current_cpu = target_cpu
}

is_clang = is_mac ||
           (cc == "clang" && cxx == "clang++") || clang_win != ""
if (!is_clang && !is_win) {
  is_clang = exec_script("//build/BUIDCONFIG_is_clang.py",
                         [
                           cc,
                           cxx,
                         ],
                         "value")
}

# *********************************************************************************
# Config msvc builder
# 配置MSVC编译，首先会尝试从系统中自动寻找vc编译器，没有匹配到结果时，再从缺省硬编码配置路径中读取
# *********************************************************************************
if (target_os == "win") {
  
  # 必须明确指定需要使用什么版本的VS工具链和windows sdk来编译
  assert(win_vc_ver >= 2013, "win_vc_ver must not less than 2013!")
  assert(win_sdk_dir != "", "win_sdk_dir must not be empty!")

  # 没有指定VS的安装路径就根据指定的msvc版本到注册表查找
  if (win_vc_dir == "") {    
    msvc_dir = exec_script("//build/toolchain/win/msvclib.py",
                          [ "$win_vc_ver" ],
                          "trim string")
    assert(msvc_dir != "", "msvclib.py can't detect vc($win_vc_ver) setup dir!")

    #vc_2017_pro_default = "C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/VC"
    #vc_2017_com_default = "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC"
    #vc_2017_bt_default = "C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC"
    #vc_2015_default = "C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC"
    #vc_2013_default = "C:/Program Files (x86)/Microsoft Visual Studio 12.0/VC"
    # msvc_dir like "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community"
    win_vc_dir = msvc_dir + "\\VC"
  }
  # 检查VC根目录是否存在
  if ("False" == exec_script("//build/toolchain/win/check_dir.py",
                            [ "$win_vc_dir" ],
                            "trim string")) {
    assert(false, "vc dir '$win_vc_dir' not exists!")
  }
  # vs2017以上要额外检查"$win_vc_dir\Tools"目录
  if (win_vc_ver >= 2017) {
    if ("False" == exec_script("//build/toolchain/win/check_dir.py",
                            [ "$win_vc_dir\\Tools" ],
                            "trim string")) {
      assert(false, "vc dir '$win_vc_dir\\Tools' not exists!")
    }
  }

  # vs2017以上还要确定具体使用哪个版本的工具链，比如 "14.16.27023" "14.25.28610"
  if (win_vc_ver >= 2017 && win_toolchain_version == "") {
    win_toolchain_version = exec_script("//build/toolchain/win/highest_version_dir.py",
                                        [
                                          "$win_vc_dir/Tools/MSVC",
                                          "[0-9]{2}\.[0-9]{2}\.[0-9]{5}",
                                        ],
                                        "trim string")
  }

  # 确定win sdk的版本，比如 "10.0.17763.0"、"10.0.18362.0"
  if (win_sdk_version == "") {
    win_sdk_version = exec_script("//build/toolchain/win/highest_version_dir.py",
                         [
                           "$win_sdk_dir/Include",
                           "[0-9]{2}\.[0-9]\.[0-9]{5}\.[0-9]",
                         ],
                         "trim string")
  }
}
# *********************************************************************************

# A component is either a static or a shared library.
template("component") {
  _component_mode = "static_library"

  target(_component_mode, target_name) {
    forward_variables_from(invoker, "*")
  }
}

# Default configs
default_configs = [
  "//build:default",
  # "//build:no_exceptions",
  # "//build:no_rtti",
  # "//build:warnings",
  "//build:warnings_except_public_headers",
]
if (!is_debug) {
  default_configs += [ "//build:release" ]
}
default_configs += [ "//build:debug_symbols" ]
default_configs += [ "//build:extra_flags" ]

set_defaults("executable") {
  configs = [ "//build:executable" ] + default_configs
}

set_defaults("source_set") {
  configs = default_configs
}

set_defaults("static_library") {
  configs = default_configs
}

set_defaults("shared_library") {
  configs = default_configs
}

set_defaults("component") {
  configs = default_configs
}

# 根据平台&CPU设置工具链
if (is_win) {
  # Windows tool chain
  default_toolchain_name = "msvc"
  host_toolchain = "//build/toolchain/win:msvc"
  set_default_toolchain(host_toolchain)
} else if (is_mac) {
  # clang-like toolchains, including Clang.
  default_toolchain_name = "mac_clang"
  host_toolchain = "//build/toolchain/mac:clang_$host_cpu"
  set_default_toolchain(host_toolchain)
} else {
  # GCC-like toolchains, including Clang.
  set_default_toolchain("//build/toolchain:gcc_like")
  default_toolchain_name = "gcc_like"
  host_toolchain = "gcc_like_host"
}
